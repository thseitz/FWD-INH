# Forward Inheritance Platform - Phase 0
# Debian-based 3-Container Architecture

services:
  # PostgreSQL Database - Debian Container
  database:
    build:
      context: .
      dockerfile: database/Dockerfile
    container_name: fwd-inh-database
    environment:
      POSTGRES_DB: fwd_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: FGt!3reGTdt5BG!
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/api/src/app/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - fwd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fwd_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # NestJS Backend API - Debian Container  
  backend:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: fwd-inh-backend
    environment:
      NODE_ENV: development
      # Database Configuration - Internal container connection
      PGHOST: database
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: FGt!3reGTdt5BG!
      PGDATABASE: fwd_db
      PGSSLMODE: disable
      # API Configuration
      API_PORT: 3001
      API_HOST: 0.0.0.0
      # CORS Configuration  
      CORS_ORIGIN: http://localhost:4200
      # JWT Configuration (Phase 0 - development keys)
      JWT_SECRET: dev-jwt-secret-change-in-production
      JWT_EXPIRES_IN: 24h
      # Session Configuration
      SESSION_SECRET: dev-session-secret-change-in-production
      # NX and watcher configuration
      NX_DAEMON: "false"
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: "300"
      WATCHPACK_POLLING: "true"
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - backend_node_modules:/app/node_modules
      - backend_nx_cache:/app/.nx
    networks:
      - fwd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend - Debian Container
  frontend:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: fwd-inh-frontend
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3001
      VITE_APP_NAME: Forward Inheritance Platform
      VITE_APP_VERSION: 1.0.0-dev
      # Phase 0 Configuration
      VITE_AUTH_MODE: stub
      VITE_STORAGE_MODE: local
      # NX and watcher configuration
      NX_DAEMON: "false"
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: "300"
      WATCHPACK_POLLING: "true"
    ports:
      - "4200:4200"
    depends_on:
      - backend
    volumes:
      - frontend_node_modules:/app/node_modules
      - frontend_nx_cache:/app/.nx
    networks:
      - fwd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache - Debian Container
  redis:
    image: redis:7-bullseye
    container_name: fwd-inh-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fwd-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_node_modules:
    driver: local
  backend_nx_cache:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_nx_cache:
    driver: local

networks:
  fwd-network:
    driver: bridge